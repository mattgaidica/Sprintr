#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

const float sprintr_ver = 1.0;
const bool dodebug = false;
int readyDelay = 2; // s
unsigned long relayDelay = 500; // ms

#define OLED_RESET 4
Adafruit_SSD1306 oled(OLED_RESET);
static const unsigned char PROGMEM sprintr_logo[] =
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x36, 0x43, 0xfb, 0x81, 0xfd, 0xe0, 0x1f, 0xe3, 0xf8, 0x7c, 0xef, 0xdc, 0xfe, 0xf0, 0x00, 
0x00, 0xe3, 0xc1, 0xfb, 0xe0, 0xfc, 0xfc, 0x1f, 0xe1, 0xfc, 0x38, 0xef, 0xdc, 0x7e, 0x7e, 0x00, 
0x01, 0xc1, 0xc1, 0xf9, 0xf0, 0xfc, 0x7c, 0x0f, 0xc0, 0xfe, 0x10, 0xcf, 0xcc, 0x7e, 0x3e, 0x00, 
0x03, 0xc0, 0xc1, 0xf9, 0xf0, 0xfc, 0x7e, 0x0f, 0xc0, 0x7e, 0x10, 0xcf, 0xcc, 0x7e, 0x3f, 0x00, 
0x03, 0xe0, 0xc1, 0xf9, 0xf8, 0xfc, 0x7e, 0x0f, 0xc0, 0xff, 0x10, 0xcf, 0xcc, 0x7e, 0x3f, 0x00, 
0x03, 0xf0, 0x41, 0xf9, 0xf8, 0xfc, 0x7e, 0x0f, 0xc0, 0xbf, 0x10, 0x8f, 0xc4, 0x7e, 0x3f, 0x00, 
0x03, 0xfe, 0x01, 0xf9, 0xf8, 0xfc, 0x7c, 0x0f, 0xc0, 0xbf, 0x90, 0x0f, 0xc0, 0x7e, 0x3e, 0x00, 
0x03, 0xff, 0x01, 0xf9, 0xf0, 0xfc, 0x7c, 0x0f, 0xc0, 0x9f, 0x90, 0x0f, 0xc0, 0x7e, 0x3e, 0x00, 
0x01, 0xff, 0xc1, 0xf9, 0xf0, 0xfd, 0xf0, 0x0f, 0xc0, 0x9f, 0xd0, 0x0f, 0xc0, 0x7e, 0xf8, 0x00, 
0x01, 0xff, 0xc1, 0xf9, 0xf0, 0xfd, 0xf0, 0x0f, 0xc0, 0x8f, 0xf0, 0x0f, 0xc0, 0x7e, 0xf8, 0x00, 
0x00, 0xff, 0xe1, 0xfb, 0xc0, 0xfc, 0x7c, 0x0f, 0xc0, 0x87, 0xe0, 0x0f, 0xc0, 0x7e, 0x3e, 0x00, 
0x02, 0x3f, 0xe1, 0xf8, 0x00, 0xfc, 0x7e, 0x0f, 0xc0, 0x87, 0xf0, 0x0f, 0xc0, 0x7e, 0x3f, 0x00, 
0x03, 0x0f, 0xe1, 0xf8, 0x00, 0xfc, 0x7e, 0x0f, 0xc0, 0x83, 0xf0, 0x0f, 0xc0, 0x7e, 0x3f, 0x00, 
0x03, 0x03, 0xe1, 0xf8, 0x00, 0xfc, 0x7e, 0x0f, 0xc0, 0x83, 0xf0, 0x0f, 0xc0, 0x7e, 0x3f, 0x00, 
0x03, 0x01, 0xc1, 0xf8, 0x00, 0xfc, 0x7e, 0x0f, 0xc0, 0x81, 0xf0, 0x0f, 0xc0, 0x7e, 0x3f, 0x00, 
0x03, 0x81, 0xc1, 0xf8, 0x00, 0xfc, 0x7f, 0x8f, 0xc0, 0x81, 0xf0, 0x0f, 0xc0, 0x7e, 0x3f, 0xc0, 
0x03, 0xc7, 0x83, 0xfc, 0x01, 0xfe, 0x3f, 0x1f, 0xe1, 0xc0, 0xf0, 0x1f, 0xe0, 0xff, 0x1f, 0x80, 
0x02, 0x6c, 0x03, 0xfc, 0x01, 0xff, 0x1e, 0x1f, 0xe3, 0xe0, 0x70, 0x1f, 0xe0, 0xff, 0x8f, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// global IO vars
const int sw1out = 6;
const int sw2out = 5;
const int beamPort = 15;
const int sw1in = 11;
const int sw2in = 10;
const int relayPort = 12;
const int indPort = 13;

void setup() {
  pinMode(sw1out,OUTPUT);
  pinMode(sw2out,OUTPUT);
  pinMode(sw1in,INPUT_PULLUP);
  pinMode(sw2in,INPUT_PULLUP);
  pinMode(beamPort,INPUT_PULLUP);
  pinMode(relayPort,OUTPUT);
  pinMode(indPort,OUTPUT);
  
  digitalWrite(indPort,HIGH);
  digitalWrite(relayPort,LOW);
  digitalWrite(sw1out,HIGH);
  digitalWrite(sw2out,HIGH);
  
  oled.begin(SSD1306_SWITCHCAPVCC,0x3C);
  oled.clearDisplay();
  oled.drawBitmap(0,0,sprintr_logo,128,32,1);
  oled.display();
  delay(500);
  
  oled.clearDisplay();
  oled.setTextSize(1);
  oled.setTextColor(WHITE);
  oled.setCursor(0,0);
  oled.print("Sprintr v");
  oled.println(sprintr_ver);
  oled.println("Matt Gaidica");
  oled.println("matt@gaidi.ca");
  oled.display();
  delay(500);
  
  readyScreen();
  
  if(dodebug == true) {
    Serial.begin(19200);
    Serial.println("Initialized");
  }
}

void loop() {
  if (!digitalRead(sw1in)) {
    raceMode();
  }
  
  if (!digitalRead(sw2in)) {
    switch (readyDelay) {
      case 2: // must matach default case
        readyDelay = 30;
        break;
      case 30:
        readyDelay = 60;
        break;
      default:
        readyDelay = 2;
    }
    readyScreen();
    delay(100);
  }
  
  if(dodebug == true) {
    Serial.print("sw1in: "); Serial.println(digitalRead(sw1in));
    Serial.print("sw2in: "); Serial.println(digitalRead(sw2in));
    Serial.print("beam: "); Serial.println(digitalRead(beamPort));
  }
}

void raceMode() {
  int curSec = readyDelay;
  while(curSec > 0) {
    printCountdown(curSec);
    digitalWrite(sw1out,LOW);
    digitalWrite(sw2out,LOW);
    delay(500);
    digitalWrite(sw1out,HIGH);
    digitalWrite(sw2out,HIGH);
    delay(500);
    --curSec;
  }
  digitalWrite(relayPort,HIGH);
  delay(relayDelay);
  digitalWrite(relayPort,LOW);
  racingScreen();
  digitalWrite(sw1out,LOW);
  digitalWrite(sw2out,HIGH);
  float finalTime = measureTime() - (relayDelay / 1000);
  showResults(finalTime);
  digitalWrite(sw1out,LOW);
  digitalWrite(sw2out,LOW);
  delay(500);
  digitalWrite(sw1out,LOW);
  digitalWrite(sw2out,HIGH);
  while(digitalRead(sw2in)) {
    // wait
  }
  digitalWrite(sw1out,HIGH);
  delay(250);
  readyScreen();
  return;
}

float measureTime() {
  float endMs = 0;
  while(digitalRead(beamPort) && digitalRead(sw2in)) {
    endMs = endMs + 10;
    delay(10);
  }
  return endMs / 1000;
}

void racingScreen() {
  oled.clearDisplay();
  oled.setCursor(0,0);
  oled.println("RACE IN PROGRESS");
  oled.println("");
  oled.print("Press Red to Stop");
  oled.display();
}

void showResults(float raceResult) {
  oled.clearDisplay();
  oled.setCursor(0,0);
  oled.print("Time: ");
  oled.print(raceResult,2);
  oled.println("s");
  oled.println("");
  oled.println("Press Red to Reset");
  oled.display();
}

void printCountdown(int curSec) {
  oled.clearDisplay();
  oled.setCursor(0,0);
  oled.print("T minus: ");
  oled.print(curSec);
  oled.print("s");
  oled.display();
}

void readyScreen() {
  oled.clearDisplay();
  oled.setCursor(0,0);
  oled.println("Let's Race!");
  oled.println("---");
  oled.println("Press Green to Start");
  oled.print("Ready Delay: ");
  oled.print(readyDelay);
  oled.print("s");
  oled.display();
}

